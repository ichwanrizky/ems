// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model menu_group {
  id         Int      @id @default(autoincrement())
  menu_group String   @unique
  urut       Int?
  group      Boolean?
  parent_id  String?
  menu       menu[]

  @@index([menu_group, urut, parent_id])
}

model menu {
  id            Int        @id @default(autoincrement())
  menu          String?
  path          String?
  last_path     String?
  urut          Int?
  menu_group_id Int
  menu_group    menu_group @relation(fields: [menu_group_id], references: [id])
  access        access[]

  @@index([urut, menu_group_id])
}

model roles {
  id                    Int                     @id @default(autoincrement())
  role_name             String                  @unique
  access_department     access_department[]
  access_sub_department access_sub_department[]
  access                access[]
  user                  user[]
}

model department {
  id                Int                 @id @default(autoincrement())
  nama_department   String              @unique
  latitude          String?
  longitude         String?
  radius            String?
  created_at        DateTime?           @db.DateTime(0)
  is_deleted        Boolean             @default(false)
  sub_department    sub_department[]
  access_department access_department[]
  shift             shift[]
}

model sub_department {
  id                    Int                     @id @default(autoincrement())
  nama_sub_department   String                  @unique
  created_at            DateTime?               @db.DateTime(0)
  is_deleted            Boolean                 @default(false)
  department_id         Int
  department            department              @relation(fields: [department_id], references: [id])
  access_sub_department access_sub_department[]
}

model access_department {
  role_id       Int
  roles         roles      @relation(fields: [role_id], references: [id])
  department_id Int
  department    department @relation(fields: [department_id], references: [id])

  @@id([role_id, department_id])
}

model access_sub_department {
  role_id           Int
  roles             roles          @relation(fields: [role_id], references: [id])
  sub_department_id Int
  sub_department    sub_department @relation(fields: [sub_department_id], references: [id])

  @@id([role_id, sub_department_id])
}

model access {
  role_id Int
  roles   roles   @relation(fields: [role_id], references: [id])
  menu_id Int
  menu    menu    @relation(fields: [menu_id], references: [id])
  view    Boolean @default(false)
  insert  Boolean @default(false)
  update  Boolean @default(false)
  delete  Boolean @default(false)

  @@id([role_id, menu_id])
}

model user {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  name       String?
  telp       String?
  role_id    Int?
  roles      roles?    @relation(fields: [role_id], references: [id])
  created_at DateTime? @db.DateTime(0)
  is_deleted Boolean   @default(false)

  @@index([username], map: "user_username")
  @@index([role_id], map: "user_role_id")
}

model shift {
  id            Int        @id @default(autoincrement())
  jam_masuk     DateTime?  @db.Time(0)
  jam_pulang    DateTime?  @db.Time(0)
  keterangan    String?
  different_day Boolean    @default(false)
  cond_friday   Int        @default(0)
  department_id Int
  department    department @relation(fields: [department_id], references: [id])
}
